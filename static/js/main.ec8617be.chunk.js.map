{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","placeholder","onClick","preventDefault","text","completed","id","uuidv4","name","Todo","todo","map","item","filter","TodoList","filteredTodos","key","todaydate","Date","toLocaleDateString","weekday","month","day","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodo","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA+CeA,EA3CF,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,aAAcC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAiBtD,OACE,8BAGE,2BACAC,MAAOF,EACPG,SArBqB,SAACC,GACtBP,EAAaO,EAAEC,OAAOH,QAqBtBI,KAAK,OACLC,UAAU,aACVC,YAAa,0BAEb,4BAAQC,QAvBc,SAACL,GACvBA,EAAEM,iBACFX,EAAS,GAAD,mBACDD,GADC,CAEJ,CAACa,KAAMX,EAAWY,WAAW,EAAOC,GAAIC,UACxCjB,EAAa,KAkBoBU,UAAU,cAAcD,KAAK,UAAlE,OAIA,yBAAKC,UAAU,UACb,4BAAQJ,SApBQ,SAACC,GACnBH,EAAUG,EAAEC,OAAOH,QAmBgBa,KAAK,SACpC,4BAAQb,MAAM,OAAd,OACA,4BAASA,MAAM,eAAf,UACA,4BAAQA,MAAM,aAAd,iB,OCHGc,EAlCH,SAAC,GAAmC,IAAlCL,EAAiC,EAAjCA,KAAMM,EAA2B,EAA3BA,KAAMnB,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAgB7B,OACI,yBAAKQ,UAAU,QACX,4BACAE,QAdgB,WACpBV,EAASD,EAAMoB,KAAI,SAAAC,GACf,OAAGA,EAAKN,KAAOI,EAAKJ,GACT,2BACAM,GADP,IAEIP,WAAYO,EAAKP,YAGlBO,OAOPZ,UAAU,gBACN,uBAAGA,UAAY,kBAEnB,wBAAIA,UAAS,oBAAeU,EAAKL,UAAY,YAAc,KAAOD,GAClE,4BACAF,QAvBe,WACnBV,EAASD,EAAMsB,QAAO,SAAAhB,GAAC,OAAIA,EAAES,KAAOI,EAAKJ,QAuBrCN,UAAU,aACN,uBAAGA,UAAY,oBCThBc,EAlBC,SAAC,GAAuC,IAAtCvB,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUuB,EAAoB,EAApBA,cAE/B,OACI,yBAAKf,UAAU,kBACX,wBAAIA,UAAU,aACTe,EAAcJ,KAAI,SAACD,GAAD,OACnB,kBAAC,EAAD,CACAlB,SAAUA,EACVD,MAAQA,EACRyB,IAAMN,EAAKJ,GACXI,KAAQA,EACRN,KAAOM,EAAKN,aCPxBa,GADQ,IAAIC,MACMC,mBAAmB,QAAS,CAACC,QAAS,OAAQC,MAAO,QAASC,IAAI,YA6EzEC,MAzEf,WAAe,MAGqBC,mBAAS,IAH9B,mBAGN/B,EAHM,KAGKH,EAHL,OAIakC,mBAAS,IAJtB,mBAINjC,EAJM,KAICC,EAJD,OAKegC,mBAAS,OALxB,mBAKNC,EALM,KAKE/B,EALF,OAM6B8B,mBAAU,IANvC,mBAMNT,EANM,KAMSW,EANT,KAQbC,qBAAW,WACTC,MACC,IAGHD,qBAAU,WACRE,IACAC,MACC,CAACvC,EAAOkC,IAGX,IAAMI,EAAgB,WACpB,OAAOJ,GACL,IAAK,YACHC,EAAiBnC,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKL,cAC3C,MACF,IAAK,cACHqB,EAAiBnC,EAAMsB,QAAO,SAAAH,GAAI,OAAuB,IAAnBA,EAAKL,cAC3C,MACF,QACEqB,EAAiBnC,KAKjBuC,EAAgB,WAClBC,aAAaC,QAAQ,QAASC,KAAKC,UAAU3C,KAG3CqC,EAAgB,WACpB,GAAsC,OAAlCG,aAAaI,QAAQ,SACvBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SAC1C,CACH,IAAIE,EAAYH,KAAKI,MAAMN,aAAaI,QAAQ,UAChD3C,EAAS4C,KAIb,OACE,6BACE,yBAAKpC,UAAU,aACb,gCACI,4BAAI,uBAAGA,UAAU,kBAAjB,uBACA,4BAAKiB,EAAL,MAEJ,kBAAC,EAAD,CACExB,UAAWA,EACXF,MAAQA,EACRC,SAAWA,EACXF,aAAgBA,EAChBI,UAAaA,IACf,kBAAC,EAAD,CACEqB,cAAiBA,EACjBvB,SAAUA,EACVD,MAAQA,KAEZ,gCACE,uBAAGS,UAAU,aAAb,+CChEYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ec8617be.chunk.js","sourcesContent":["import React from 'react';\nimport  uuidv4  from 'uuid/v4';\nimport DropdownButton from 'react-bootstrap/DropdownButton'\n\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\n\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    }\n    const submitTodoHAndler = (e) => {\n        e.preventDefault();\n        setTodos([ \n            ...todos, \n            {text: inputText, completed: false, id: uuidv4() }]);\n            setInputText('');\n    };\n\n    const statushandler = (e) => {\n        setStatus(e.target.value);\n    }\n\n    return(\n      <form>\n\n\n        <input \n        value={inputText} \n        onChange= {inputTextHandler} \n        type=\"text\" \n        className=\"todo-input\" \n        placeholder= \"What needs to be done\"\n        />\n        <button onClick= {submitTodoHAndler} className=\"todo-button\" type=\"submit\">\n          Add\n        </button>\n\n        <div className=\"select\">\n          <select onChange={statushandler} name=\"todos\" >\n            <option value=\"all\">All</option>\n            <option  value=\"uncompleted\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n      </form>\n    );\n}\n\nexport default Form;","import React from 'react';\n\n\nconst Todo =({text, todo, todos, setTodos}) => {\n\n    const deleteHandeler = () => {\n        setTodos(todos.filter(e => e.id !== todo.id));\n    }\n    const completeHandler = () => {\n        setTodos(todos.map(item => {\n            if(item.id === todo.id){\n                return {\n                    ...item, \n                    completed: !item.completed,\n                };\n            }\n            return item;\n        } ));\n    };\n    return (\n        <div className=\"todo\">\n            <button \n            onClick={completeHandler} \n            className=\"complete-btn\">\n                <i className = \"fas fa-check\"></i>\n            </button>\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\n            <button \n            onClick={deleteHandeler} \n            className=\"trash-btn\">\n                <i className = \"fas fa-trash\"></i>\n            </button>\n        </div>\n\n    )\n};\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList =({todos, setTodos, filteredTodos }) => {\n\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map((todo) => (\n                <Todo \n                setTodos={setTodos} \n                todos= {todos}  \n                key= {todo.id} \n                todo = {todo}\n                text= {todo.text} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList;","import React, {useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\n//for display date and time\nlet today = new Date();\nlet todaydate = today.toLocaleDateString(\"en-US\", {weekday: \"long\", month: \"short\", day:\"numeric\"});\n\n\n\nfunction App() {\n\n  //States\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState ([]);\n\n  useEffect (() => {\n    getLocalTodos();\n  }, []);\n  \n  //Use Effect\n  useEffect(() =>{\n    filterHandler();\n    saveLocalTodo();\n  }, [todos, status]);\n\n  //Function\n  const filterHandler = () => {\n    switch(status){\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  const saveLocalTodo = () => {\n      localStorage.setItem('todos', JSON.stringify(todos))\n  }\n\n  const getLocalTodos = () =>{\n    if (localStorage.getItem('todos') === null){\n      localStorage.setItem('todos', JSON.stringify([]));\n    }else{\n      let todoLocal = JSON.parse(localStorage.getItem('todos'));\n      setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"appheader\">\n        <header>\n            <h1><i className=\"fas fa-tasks \"></i> Masoud's Todo List</h1>\n            <h3>{todaydate} </h3>\n        </header>\n        <Form \n          inputText={inputText} \n          todos= {todos} \n          setTodos= {setTodos} \n          setInputText = {setInputText} \n          setStatus = {setStatus}   />\n        <TodoList \n          filteredTodos = {filteredTodos}\n          setTodos={setTodos} \n          todos= {todos}  />\n      </div>\n      <footer>\n        <p className=\"copyright\">\n            Copyright &copy; 2020. All rights reserved\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}